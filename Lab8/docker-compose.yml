version: '3'

services:
  # zookeeper:
  #   image: 'confluentinc/cp-zookeeper:latest'
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - '2181:2181'
  #   environment:
  #     - ZOOKEEPER_CLIENT_PORT=2181
  #     - ZOOKEEPER_TICK_TIME=2000

  # kafka:
  #   image: 'confluentinc/cp-kafka:latest'
  #   hostname: kafka
  #   container_name: kafka
  #   ports:
  #     - '9092:9092'
  #   environment:
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
  #     - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
  #   depends_on:
  #     - zookeeper

  # postgis:
  #   image: postgis/postgis:latest
  #   environment: 
  #     - POSTGRES_PASSWORD=mysecretpassword
  #   expose:
  #     - 5432:5432

  db:
    #image: postgis/postgis:latest
    build:
      context: .
      dockerfile: Dockerfile
    container_name: db
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    # volumes:
    #   - ./init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 50
    networks:
      de:
  
  service1:
    build: 
      context: service1
      dockerfile: dockerfile
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=db
    depends_on:
      db:
        condition: service_healthy
    links:
      - db
    networks:
      de:

networks:
  de:


